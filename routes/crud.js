import express from "express";
import mongoose from "mongoose";

const router = express.Router();

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ø–æ—Å—Ç–∞
const PostSchema = new mongoose.Schema({
    title: { type: String, required: true },
    content: { type: String, required: true },
    topic: { type: String, required: true }
});

const Post = mongoose.model("Post", PostSchema);

// üìå GET –≤—Å–µ –ø–æ—Å—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
router.get("/", async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 5;
        const skip = (page - 1) * limit;

        const posts = await Post.find().skip(skip).limit(limit);
        res.json(posts);
    } catch (error) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤" });
    }
});

// üìå GET –æ–¥–∏–Ω –ø–æ—Å—Ç –ø–æ ID
router.get("/:id", async (req, res) => {
    try {
        const post = await Post.findById(req.params.id);
        if (!post) {
            return res.status(404).json({ error: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }
        res.json(post);
    } catch (error) {
        res.status(500).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID" });
    }
});

// üìå GET –ø–æ—Å—Ç—ã –ø–æ —Ç–µ–º–µ
router.get("/topic", async (req, res) => {
    try {
        const { name } = req.query;
        if (!name) {
            return res.status(400).json({ error: "–ü–∞—Ä–∞–º–µ—Ç—Ä 'name' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
        }

        const posts = await Post.find({ topic: name });
        res.json(posts);
    } catch (error) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Ç–µ–º–µ" });
    }
});

// üìå GET –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
router.get("/search", async (req, res) => {
    try {
        const { query } = req.query;
        if (!query) {
            return res.status(400).json({ error: "–ü–∞—Ä–∞–º–µ—Ç—Ä 'query' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
        }

        const posts = await Post.find({
            $or: [
                { title: { $regex: query, $options: "i" } },
                { content: { $regex: query, $options: "i" } }
            ]
        });
        res.json(posts);
    } catch (error) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤" });
    }
});

// üìå POST —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
router.post("/", async (req, res) => {
    try {
        const { title, content, topic } = req.body;

        if (!title || !content || !topic) {
            return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è (title, content, topic) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        const newPost = new Post({ title, content, topic });
        await newPost.save();
        res.status(201).json(newPost);
    } catch (error) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞" });
    }
});

// üìå PUT –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ ID
router.put("/:id", async (req, res) => {
    try {
        const { title, content, topic } = req.body;

        if (!title || !content || !topic) {
            return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è (title, content, topic) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        const updatedPost = await Post.findByIdAndUpdate(
            req.params.id,
            { title, content, topic },
            { new: true }
        );

        if (!updatedPost) {
            return res.status(404).json({ error: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json(updatedPost);
    } catch (error) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞" });
    }
});

// üìå DELETE —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ ID
router.delete("/:id", async (req, res) => {
    try {
        const deletedPost = await Post.findByIdAndDelete(req.params.id);

        if (!deletedPost) {
            return res.status(404).json({ error: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json({ message: "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞" });
    }
});

export default router;